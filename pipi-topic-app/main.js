import{getMessaging,getToken}from "https://www.gstatic.com/firebasejs/11.2.0/firebase-messaging.js";const apiUrl="https://script.google.com/macros/s/AKfycbzqPwuCeyZ59ZwBMcAoGB4OoDQUPHx6TWDBa7L2JRXm_AptZH92qhBS0Ex7lLFCbbY/exec";const publicServerKey="BE7fjDfHWYh0cEnd1oIAM958MlqtL7wAAX1lJFdruagLYx4JSt0q9Z6tH9KD5UHj7QzfNiFewsGmcocGyoQFN88";let serviceWorker=null
const MAX_KEYWORD_COUNT=30;function 共通設定(){}
const DB_NAME="pipi-topic-db";const DB_VERSION=1;const APP_SETTING_STORE_NAME="settings";const TOPICS_STORE_NAME="topics";const NOTIFICATION_TIME_STORE_NAME='notificationTimes';async function DB初期化(){let db=null;try{db=await openDB()}catch(error){alert(`DBの初期化でエラーが発生しました: ${error}`);throw error}finally{if(db)await closeDB(db);}}
async function openDB(){return new Promise((resolve,reject)=>{const request=indexedDB.open(DB_NAME,DB_VERSION);request.onerror=(event)=>{reject(event)};request.onsuccess=(event)=>{resolve(event.target.result)};request.onupgradeneeded=(event)=>{const db=event.target.result;if(DB_VERSION===1){if(!db.objectStoreNames.contains(APP_SETTING_STORE_NAME)){db.createObjectStore(APP_SETTING_STORE_NAME,{keyPath:"key"})}
if(!db.objectStoreNames.contains(TOPICS_STORE_NAME)){db.createObjectStore(TOPICS_STORE_NAME,{keyPath:"topicNo"})}
if(!db.objectStoreNames.contains(NOTIFICATION_TIME_STORE_NAME)){const notificationTimeStore=db.createObjectStore(NOTIFICATION_TIME_STORE_NAME,{keyPath:"time"});const initialNotificationTimes=[{time:"09:00"},{time:"12:00"},{time:"18:00"},];initialNotificationTimes.forEach(time=>{notificationTimeStore.add(time)})}}}})}
async function putStoreValue(db,storeName,value){return new Promise((resolve,reject)=>{const tx=db.transaction(storeName,'readwrite');const store=tx.objectStore(storeName);const request=store.put(value);request.onsuccess=(event)=>{resolve(event.target.result)};request.onerror=(event)=>{reject(event.target.error)};tx.oncomplete=()=>{};tx.onerror=(event)=>{reject(event.target.error)};tx.onabort=(event)=>{reject(new Error(`Transaction aborted: ${event.target.error?.message || 'Unknown reason'}`))}})}
async function getStoreValue(db,storeName,key){return new Promise((resolve,reject)=>{const tx=db.transaction(storeName,'readonly');const store=tx.objectStore(storeName);const request=store.get(key);request.onsuccess=(event)=>{resolve(event.target.result)};request.onerror=(event)=>{reject(event.target.error)};tx.oncomplete=()=>{};tx.onerror=(event)=>{reject(event.target.error)};tx.onabort=(event)=>{reject(new Error(`Transaction aborted: ${event.target.error?.message || 'Unknown reason'}`))}})}
async function getAllStoreValue(db,storeName){return new Promise((resolve,reject)=>{const tx=db.transaction(storeName,'readonly');const store=tx.objectStore(storeName);const request=store.getAll();request.onsuccess=(event)=>{resolve(event.target.result)};request.onerror=(event)=>{reject(event.target.error)};tx.oncomplete=()=>{};tx.onerror=(event)=>{reject(event.target.error)};tx.onabort=(event)=>{reject(new Error(`Transaction aborted: ${event.target.error?.message || 'Unknown reason'}`))}})}
async function deleteStoreValue(db,storeName,key){return new Promise((resolve,reject)=>{const tx=db.transaction(storeName,'readwrite');const store=tx.objectStore(storeName);const request=store.delete(key);request.onsuccess=(event)=>{resolve(event.target.result)};tx.onerror=(event)=>{reject(event.target.error)};tx.onabort=(event)=>{reject(new Error(`Transaction aborted: ${event.target.error?.message || 'Unknown reason'}`))}})}
async function deleteIndexedDB(dbName){return new Promise((resolve,reject)=>{const request=indexedDB.deleteDatabase(dbName);request.onsuccess=()=>{console.log("IndexedDB deleted successfully.");resolve()};request.onerror=(event)=>{console.error("Error deleting IndexedDB:",event.target.error);reject(event.target.error)}})}
async function closeDB(db){return new Promise((resolve,reject)=>{db.close();resolve()})}
async function サービスワーカー登録(event){serviceWorker=event.detail;const bellButton=document.getElementById('bell-button');const onsToolbarButtonSetting=document.getElementById('ons-toolbar-button-setting');if(Notification.permission==='default'){deleteIndexedDB(DB_NAME);const onsAlertDialogInitMessage=document.getElementById('ons-alert-dialog-init-message');onsAlertDialogInitMessage.show();const onsAlertDialogButtonInitNext=document.getElementById('ons-alert-dialog-button-init-next');onsAlertDialogButtonInitNext.onclick=()=>{onsAlertDialogInitMessage.hide();const onsPopoverBell=document.getElementById('ons-popover-bell');onsPopoverBell.show();bellButton.style.removeProperty('display');bellButton.addEventListener('click',()=>{通知の許可を取る(event)})}}else if(Notification.permission==='granted'){bellButton.style.display="none";onsToolbarButtonSetting.style.removeProperty('display')}else{ons.notification.alert('通知が許可されていないのでこのアプリは使えません')}
console.log('Service Worker registered:',event)}
function 通知の許可を取る(registration){Notification.requestPermission().then(permission=>{if(permission==='granted'){console.log('Notification permission granted.');const onsToolbarButtonSetting=document.getElementById('ons-toolbar-button-setting');onsToolbarButtonSetting.style.removeProperty('display');const bellButton=document.getElementById('bell-button');bellButton.style.display="none";const onsPopoverSetting=document.getElementById('ons-popover-setting');onsPopoverSetting.show();ユーザーサブスクリプションの発行(registration)}else if(permission==='denied'){ons.notification.alert('通知が拒否されました。設定から変更してください。',{title:"アプリは使えません"})}else{console.log('Notification permission denied.')}})}
function ユーザーサブスクリプションの発行(registration){const messaging=getMessaging();getToken(messaging,{vapidKey:publicServerKey,serviceWorkerRegistration:registration.detail,}).then((token)=>{if(token){console.log("token",token);トークンをサーバーに登録(token)}else{console.log('登録トークンがありません。生成する許可をリクエストします。')}}).catch((err)=>{console.log('getToken Error',err)})}
async function トークンをサーバーに登録(token){const payload={"action":"registerToken","token":token};try{const response=await fetch(apiUrl,{'method':'POST','Content-Type':'application/json','body':JSON.stringify(payload)});if(response.ok){console.log("Endpoint registered")}
const text=await response.text();console.log(text)}catch(error){console.error("Error registering endpoint:",error)}}
function キーワード新規追加ダイアログを開く(event){requestAnimationFrame(()=>{const onsKeywordInput=document.getElementById('ons-keyword-input');onsKeywordInput.value="";onsKeywordInput.focus()})
const onsDialogKeyword=document.getElementById('ons-dialog-keyword');onsDialogKeyword.dataset.mode="add"
onsDialogKeyword.show()}
function キーワードダイアログpreShow(event){requestAnimationFrame(()=>{const dialog=event.target;const keywordDelete=document.getElementById('keyword-delete');const keywordAdd=document.getElementById('keyword-add');const keywordEdit=document.getElementById('keyword-edit');const mode=dialog.dataset.mode;keywordDelete.disabled=!1;keywordAdd.style.removeProperty('display');keywordEdit.style.removeProperty('display');switch(mode){case "add":keywordDelete.disabled=!0;keywordEdit.style.display="none";break;case "edit":keywordDelete.disabled=!1;keywordAdd.style.display="none";break}})}
function キーワード追加ボタンクリック(event){const keywordList=document.getElementById('ons-list-keyword');const onsKeywordInput=document.getElementById('ons-keyword-input');const keywordValue=onsKeywordInput.value.trim();if(keywordValue===''){ons.notification.alert('キーワードを入力してください',{cancelable:!0,title:'入力エラー'});return}
const existingItems=keywordList.querySelectorAll('.list-item-keyword-value');for(const existingItem of existingItems){if(existingItem.textContent===keywordValue){ons.notification.alert(`「${keywordValue}」は既に登録されています`,{cancelable:!0,title:'重複しています'});return}}
const newItem=キーワードリストアイテムを作成(keywordValue);const listCount=keywordList.childElementCount;if(listCount>=MAX_KEYWORD_COUNT){ons.notification.alert(`登録できるキーワードは最大で${MAX_KEYWORD_COUNT}個です`,{cancelable:!0,title:"これ以上登録できません"})
return}
keywordList.appendChild(newItem);const onsDialogKeyword=document.getElementById('ons-dialog-keyword');onsDialogKeyword.hide()}
function キーワードリストアイテムを作成(keywordValue){const template=document.getElementById('list-item-keyword-template');const newItem=template.content.cloneNode(!0);newItem.querySelector('.list-item-keyword-value').textContent=keywordValue;newItem.querySelector('.list-item-edit-button').addEventListener('click',(event)=>{const onsDialogKeyword=document.getElementById('ons-dialog-keyword');const onsKeywordInput=document.getElementById('ons-keyword-input');requestAnimationFrame(()=>{const listItem=event.target.closest('ons-list-item');const currentText=listItem.querySelector('.list-item-keyword-value').textContent;onsDialogKeyword.dataset.mode="edit";onsDialogKeyword.dataset.originValue=currentText;onsKeywordInput.value=currentText;onsKeywordInput.focus()})
onsDialogKeyword.show()});return newItem}
function キーワードインプットでEnter(event){const dialog=event.target.closest('ons-dialog');const mode=dialog.dataset.mode;if(event.key==='Enter'){switch(mode){case "add":document.getElementById('keyword-add').click();break;case "edit":document.getElementById('keyword-edit').click();break}}}
async function キーワード削除クリック(event){const confirmVal=await ons.notification.confirm("本当に削除しますか？",{title:"確認",buttonLabels:["いいえ","はい"]});if(confirmVal===1){const onsDialogKeyword=document.getElementById('ons-dialog-keyword');const originValue=onsDialogKeyword.dataset.originValue;const onsListKeyword=document.getElementById('ons-list-keyword');const listItems=onsListKeyword.querySelectorAll('ons-list-item');for(const listItem of listItems){const listItemValue=listItem.querySelector('.list-item-keyword-value').textContent;if(listItemValue===originValue){onsListKeyword.removeChild(listItem);break}}
onsDialogKeyword.hide()}}
function キーワード編集ボタンクリック(event){const onsListKeyword=document.getElementById('ons-list-keyword');const onsDialogKeyword=document.getElementById('ons-dialog-keyword');const originValue=onsDialogKeyword.dataset.originValue;const onsKeywordInput=document.getElementById('ons-keyword-input');const keywordValue=onsKeywordInput.value.trim();if(keywordValue===''){ons.notification.alert('キーワードを入力してください',{cancelable:!0,title:'入力エラー'});return}
const existingItems=onsListKeyword.querySelectorAll('.list-item-keyword-value');for(const existingItem of existingItems){if(existingItem.textContent===keywordValue){ons.notification.alert(`「${keywordValue}」は既に登録されています`,{cancelable:!0,title:'重複しています'});return}}
const listItems=onsListKeyword.querySelectorAll('ons-list-item');for(const listItem of listItems){const listItemValue=listItem.querySelector('.list-item-keyword-value').textContent;if(listItemValue===originValue){listItem.querySelector('.list-item-keyword-value').textContent=keywordValue;break}}
onsDialogKeyword.hide()}
function サーバーからキーワード取得(event){const onsModal2=document.getElementById('ons-modal2');onsModal2.show();if(!serviceWorker){setTimeout(サーバーからキーワード取得,1000);return}
requestAnimationFrame(()=>{const onsPopover1=document.getElementById('ons-popover1');onsPopover1.show()});const messaging=getMessaging();getToken(messaging,{vapidKey:publicServerKey,serviceWorkerRegistration:serviceWorker,}).then((currentToken)=>{if(currentToken){fetch(`${apiUrl}?action=getKeywords&token=${currentToken}`,{'method':'GET','Content-Type':'application/json',}).then(response=>{if(response.ok){return response.text()}else{console.error("Error getting keywords");return Promise.reject("Error getting keywords")}}).then(keywords=>{const parsedKeywords=JSON.parse(keywords);if(parsedKeywords.length===0){const onsPopoverKeyword1=document.getElementById('ons-popover-keyword1');onsPopoverKeyword1.show();onsPopoverKeyword1.addEventListener('posthide',()=>{const onsPopoverKeyword2=document.getElementById('ons-popover-keyword2');onsPopoverKeyword2.show()});return}
キーワードを表示(parsedKeywords)}).catch(error=>{キーワードを表示([])}).finally(()=>{onsModal2.hide()})}else{console.error('No registration token available. Request permission to send push messages.')}}).catch((err)=>{console.error('An error occurred while retrieving token.',err)})}
function キーワードを表示(keywords){const onsListKeyword=document.getElementById('ons-list-keyword');onsListKeyword.innerHTML='';keywords.forEach(keyword=>{const newItem=キーワードリストアイテムを作成(keyword);onsListKeyword.appendChild(newItem)})}
async function キーワードをサーバーに送信(event){const onsModal2=document.getElementById('ons-modal2');onsModal2.show();const onsListKeyword=document.getElementById('ons-list-keyword');const keywords=[];const listItems=onsListKeyword.querySelectorAll('.list-item-keyword-value');for(const listItem of listItems){keywords.push(listItem.textContent)}
try{const messaging=getMessaging();const currentToken=await getToken(messaging,{vapidKey:publicServerKey,serviceWorkerRegistration:serviceWorker,});try{if(currentToken){const payload={"action":"editKeywords","keywords":keywords,"token":currentToken};try{const response=await fetch(apiUrl,{'method':'POST','Content-Type':'application/json','body':JSON.stringify(payload)});if(response.ok){console.log("Keywords updated");const responseText=await response.text();ons.notification.alert("キーワードを更新しました",{id:"keyword-update-alert",title:"メッセージ",cancelable:!0,})}else{console.error("Error updating keywords")}}catch(error){console.error("Error sending request:",error)}}else{console.error('No registration token available. Request permission to send push messages.')}}catch(err){console.error('An error occurred while retrieving token.',err)}}finally{onsModal2.hide()}}
function キーワードページに移動(event){const onsNavigator1=document.getElementById('ons-navigator1');onsNavigator1.pushPage("keyword.html");const onsDialogSetting=document.getElementById('ons-dialog-setting');onsDialogSetting.hide()}
async function 溜め込まれてるトピックを表示(event){const onsListTopic=document.getElementById('ons-list-topic');onsListTopic.textContent="通知されたトピックはありません";let db=null;try{db=await openDB();const topics=await getAllStoreValue(db,TOPICS_STORE_NAME);if(topics.length===0){return}
const now=new Date();const sevenDaysAgo=new Date(now.getTime()-7*24*60*60*1000);let topicsToDelete=[];topics.forEach(topic=>{const topicDate=new Date(topic.timestamp);if(topicDate<sevenDaysAgo){topicsToDelete.push(topic.topicNo)}});if(topicsToDelete.length>0){topicsToDelete.forEach(topicNo=>{deleteStoreValue(db,TOPICS_STORE_NAME,topicNo)});const newTopics=await getAllStoreValue(db,TOPICS_STORE_NAME);displayTopics(newTopics,onsListTopic,db)}else{displayTopics(topics,onsListTopic,db)}}catch(error){alert(`DB操作でエラーが発生しました: ${error}`);console.error(error)}}
async function displayTopics(topics,onsListTopic,db){onsListTopic.innerHTML='';if(!serviceWorker){setTimeout(displayTopics,1000,topics,onsListTopic,db);return}
const topicNos=topics.filter(topic=>!topic.title).map(topic=>topic.topicNo);if(topicNos.length!==0){const messaging=getMessaging();const currentToken=await getToken(messaging,{vapidKey:publicServerKey,serviceWorkerRegistration:serviceWorker,});const onsModal3=document.getElementById('ons-modal3');try{if(currentToken){onsModal3.show();const response=await fetch(`${apiUrl}?action=getTopics&topicNos=${encodeURIComponent(JSON.stringify(topicNos))}&token=${currentToken}`,{'method':'GET','Content-Type':'application/json',});try{let topicsData=[];if(response.ok){topicsData=await response.json()}else{console.error('Error getting topics');return Promise.reject('Error getting topics')}
topicsData.forEach(async topicData=>{const existingTopic=await getStoreValue(db,TOPICS_STORE_NAME,topicData.topicNo);if(existingTopic){const updatedTopic={...existingTopic,title:topicData.title,summary:topicData.summary,};await putStoreValue(db,TOPICS_STORE_NAME,updatedTopic)}});await displayDBTopics()}catch(error){console.error('Error fetching topics:',error)}}else{console.error('No registration token available. Request permission to send push messages.')}}catch(err){console.error('An error occurred while retrieving token.',err)}finally{onsModal3.hide()}}else{await displayDBTopics()}}
async function displayDBTopics(){let db=null;try{db=await openDB();const onsListTopic=document.getElementById('ons-list-topic');const topics=await getAllStoreValue(db,TOPICS_STORE_NAME);topics.forEach(topic=>{const template=document.getElementById('template-topic-list-item');const newItem=template.content.cloneNode(!0);const card=newItem.querySelector('ons-card');card.dataset.topicNo=topic.topicNo;const topicTitleElement=newItem.querySelector('.topic-list-item-title');topicTitleElement.innerHTML=highlightKeywords(topic.title,topic.keywords);topicTitleElement.href=`https://news.yahoo.co.jp/pickup/${topic.topicNo}`;const topicSummaryElement=newItem.querySelector('.topic-list-item-summary');topicSummaryElement.innerHTML=highlightKeywords(topic.summary,topic.keywords);newItem.querySelector('.topic-list-item-keywords').textContent=topic.keywords.join(",");newItem.querySelector('.topic-list-item-time').textContent=topic.timestamp;const readButton=newItem.querySelector('.read-button');readButton.addEventListener('click',(event)=>{既読処理(event)});onsListTopic.appendChild(newItem)})}catch(error){alert(`DB操作でエラーが発生しました: ${error}`);console.error(error);return Promise.reject(error)}finally{if(db)closeDB(db);}
return Promise.resolve()}
function highlightKeywords(text,keywords){if(!text||!keywords){return text}
let highlightedText="";let lastIndex=0;keywords.forEach(keyword=>{const regex=new RegExp(escapeRegExp(keyword),'gi');let match;while((match=regex.exec(text))!==null){const start=Math.max(0,match.index-5);const end=Math.min(text.length,match.index+match[0].length+5);highlightedText+=text.substring(lastIndex,start).replace(/./g,'■');highlightedText+=text.substring(start,end);highlightedText=highlightedText.replace(match[0],`<span style="background:yellow; color: red;">${match[0]}</span>`);lastIndex=end}});highlightedText+=text.substring(lastIndex).replace(/./g,'■');return highlightedText}
function escapeRegExp(string){return string.replace(/[.*+?^${}()|[\]\\]/g,'\\$&')}
async function 既読処理(event){const card=event.target.closest('ons-card');const topicNo=card.dataset.topicNo;let db=null;try{db=await openDB();await deleteStoreValue(db,TOPICS_STORE_NAME,topicNo);溜め込まれてるトピックを表示(event)}catch(error){ons.notification.alert(`エラーが発生しました error:${error}`);console.error(`Error deleting topic with topicNo ${topicNo} from IndexedDB:`,error)}finally{if(db)await closeDB(db);}}
function 設定ダイアログを表示(event){const onsDialogSetting=document.getElementById('ons-dialog-setting');onsDialogSetting.show()}
function アプリ設定画面を開く(event){const onsDialogSetting=document.getElementById('ons-dialog-setting');onsDialogSetting.hide();const onsNavigator1=document.getElementById('ons-navigator1');onsNavigator1.pushPage("app-setting.html")}
async function 保存データの削除(event){const ret=await ons.notification.confirm("本当に削除しますか？",{id:"db-delete-confirm",title:"確認",buttonLabels:["いいえ","はい"],});if(ret===1){try{await deleteIndexedDB(DB_NAME);await ons.notification.alert("保存データを削除しました",{id:"db-delete-complete",title:"お知らせ",});const deviceTopicCount=document.getElementById('device-topic-count');deviceTopicCount.textContent="0";const deviceDbSize=document.getElementById('device-db-size');deviceDbSize.textContent="0 Byte"}catch(error){console.error("保存データ削除中にエラーが発生しました:",error);await ons.notification.alert("保存データの削除に失敗しました",{id:"db-delete-error",title:"エラー",})}}}
async function データベースの情報を表示(event){const onsListTopic=document.getElementById('ons-list-topic');const deviceTopicCount=onsListTopic.querySelectorAll('ons-card').length;document.getElementById('device-topic-count').textContent=deviceTopicCount;let totalSize=0;const checkComplete=()=>{const sizeInBytes=totalSize;let size;let unit;if(sizeInBytes<1024){size=sizeInBytes;unit='Byte'}else if(sizeInBytes<1024*1024){size=(sizeInBytes/1024).toFixed(2);unit='KByte'}else{size=(sizeInBytes/(1024*1024)).toFixed(2);unit='MByte'}
document.getElementById('device-db-size').textContent=`${size} ${unit}`}
let db=null;try{db=await openDB();const topics=await getAllStoreValue(db,TOPICS_STORE_NAME);let storeSize=0;topics.forEach(item=>{storeSize+=JSON.stringify(item).length});totalSize+=storeSize;checkComplete()}catch(error){console.error('getAll error: ',error)
checkComplete()}finally{if(db)await closeDB(db);}}
function バックボタン処理(event){const keywordUpdateAlert=document.getElementById('keyword-update-alert');if(keywordUpdateAlert){keywordUpdateAlert.hide().then(()=>{keywordUpdateAlert.remove()})}
const dbDeleteConfirm=document.getElementById('db-delete-confirm');if(dbDeleteConfirm){dbDeleteConfirm.hide().then(()=>{dbDeleteConfirm.remove()})}
const dbDeleteComplete=document.getElementById('db-delete-complete');if(dbDeleteComplete){dbDeleteComplete.hide().then(()=>{dbDeleteComplete.remove()})}
const dbDeleteError=document.getElementById('db-delete-error');if(dbDeleteError){dbDeleteError.hide().then(()=>{dbDeleteError.remove()})}
const onsNavigator1=document.getElementById('ons-navigator1');onsNavigator1.popPage()}
function ヒストリー消去(event){window.history.back()}
function ヒストリー追加(event){try{history.pushState({},'','')}catch(e){console.log(e)}}
function プルジェスチャーチェンジ(event){switch(event.state){case 'initial':break;case 'preaction':break;case 'action':溜め込まれてるトピックを表示();break}}
function 通知時刻のchangeイベント(event){const timeInput=document.getElementById('time-input');const selectedTime=this.value;const[hours]=selectedTime.split(':');this.value=`${hours}:00`}
function 時間追加ダイアログの表示前イベント(event){const timeInput=document.getElementById('time-input');const now=new Date();const hours=String(now.getHours()).padStart(2,'0');timeInput.value=`${hours}:00`}
function 通知時刻の追加ダイアログを開く(event){const onsDialogNotificationTime=document.getElementById('ons-dialog-notification-time');onsDialogNotificationTime.show()}
async function 通知時刻を追加(event){const timeInput=document.getElementById('ons-input-notification-time');const selectedTime=timeInput.value;const[hours]=selectedTime.split(':');const notificationTime=`${hours}:00`;let db=null;try{db=await openDB();const ignoreTime=await getStoreValue(db,NOTIFICATION_TIME_STORE_NAME,notificationTime);if(ignoreTime){ons.notification.alert('同じ時刻は既に登録されています',{title:'エラー'});return}
await putStoreValue(db,NOTIFICATION_TIME_STORE_NAME,{time:notificationTime});const onsDialogNotificationTime=document.getElementById('ons-dialog-notification-time');onsDialogNotificationTime.hide();通知時刻の表示()}catch(error){ons.notification.alert('通知時刻の追加に失敗しました',{title:'エラー'});throw error}finally{if(db)await closeDB(db);}}
async function 通知時刻の表示(event){const templateNotificationItem=document.getElementById('template-notification-item');const notificationTimeList=document.getElementById('notification-time-list');notificationTimeList.textContent="";let db=null;try{db=await openDB();const notificationTimes=await getAllStoreValue(db,NOTIFICATION_TIME_STORE_NAME);notificationTimes.forEach(notificationTime=>{const clone=document.importNode(templateNotificationItem.content,!0);const notificationTimeElement=clone.querySelector('.notification-time');notificationTimeElement.textContent=`${notificationTime.time.slice(0, 2)}時`;const deleteButton=clone.querySelector('.notification-time-delete');deleteButton.dataset.key=notificationTime.time;deleteButton.addEventListener('click',async(event)=>{let db=null;try{db=await openDB();const key=event.target.closest('ons-button').dataset.key
await deleteStoreValue(db,NOTIFICATION_TIME_STORE_NAME,key);ons.notification.alert('通知時刻を削除しました',{title:'成功'});const targetElement=notificationTimeList.querySelector(`ons-button[data-key="${key}"]`).closest('.notification-time-item');if(targetElement){targetElement.remove()}}catch(error){ons.notification.alert('通知時刻の削除に失敗しました',{title:'エラー'});throw error}finally{if(db)await closeDB(db);}});notificationTimeList.appendChild(clone)})}finally{if(db)await closeDB(db);}}
window.addEventListener('load',DB初期化);window.addEventListener('popstate',バックボタン処理);document.addEventListener('PwappyServiceWorkerRegistered',サービスワーカー登録);let onsnavigator1_element=document.querySelector('#ons-navigator1');if(onsnavigator1_element){onsnavigator1_element.addEventListener('prepush',ヒストリー追加);onsnavigator1_element.addEventListener('prepop',ヒストリー消去)}
document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page2'){let onsbuttonkeywordsend_element=document.querySelector('#ons-button-keyword-send');if(onsbuttonkeywordsend_element){onsbuttonkeywordsend_element.addEventListener('click',キーワードをサーバーに送信);page.addEventListener('destroy',function(event){onsbuttonkeywordsend_element.removeEventListener('click',キーワードをサーバーに送信)},{'once':!0})}
let keyworddelete_element=document.querySelector('#keyword-delete');if(keyworddelete_element){keyworddelete_element.addEventListener('click',キーワード削除クリック);page.addEventListener('destroy',function(event){keyworddelete_element.removeEventListener('click',キーワード削除クリック)},{'once':!0})}
let keywordadd_element=document.querySelector('#keyword-add');if(keywordadd_element){keywordadd_element.addEventListener('click',キーワード追加ボタンクリック);page.addEventListener('destroy',function(event){keywordadd_element.removeEventListener('click',キーワード追加ボタンクリック)},{'once':!0})}
let keywordedit_element=document.querySelector('#keyword-edit');if(keywordedit_element){keywordedit_element.addEventListener('click',キーワード編集ボタンクリック);page.addEventListener('destroy',function(event){keywordedit_element.removeEventListener('click',キーワード編集ボタンクリック)},{'once':!0})}
let onskeywordinput_element=document.querySelector('#ons-keyword-input');if(onskeywordinput_element){onskeywordinput_element.addEventListener('keydown',キーワードインプットでEnter);page.addEventListener('destroy',function(event){onskeywordinput_element.removeEventListener('keydown',キーワードインプットでEnter)},{'once':!0})}
サーバーからキーワード取得(event);let onsdialogkeyword_element=document.querySelector('#ons-dialog-keyword');if(onsdialogkeyword_element){onsdialogkeyword_element.addEventListener('preshow',キーワードダイアログpreShow);page.addEventListener('destroy',function(event){onsdialogkeyword_element.removeEventListener('preshow',キーワードダイアログpreShow)},{'once':!0})}
let onsfabkeywordadd_element=document.querySelector('#ons-fab-keyword-add');if(onsfabkeywordadd_element){onsfabkeywordadd_element.addEventListener('click',キーワード新規追加ダイアログを開く);page.addEventListener('destroy',function(event){onsfabkeywordadd_element.removeEventListener('click',キーワード新規追加ダイアログを開く)},{'once':!0})}}});document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page1'){let onsbuttonshowkeyword_element=document.querySelector('#ons-button-show-keyword');if(onsbuttonshowkeyword_element){onsbuttonshowkeyword_element.addEventListener('click',キーワードページに移動);page.addEventListener('destroy',function(event){onsbuttonshowkeyword_element.removeEventListener('click',キーワードページに移動)},{'once':!0})}
let onsbuttonshowappsetting_element=document.querySelector('#ons-button-show-app-setting');if(onsbuttonshowappsetting_element){onsbuttonshowappsetting_element.addEventListener('click',アプリ設定画面を開く);page.addEventListener('destroy',function(event){onsbuttonshowappsetting_element.removeEventListener('click',アプリ設定画面を開く)},{'once':!0})}
let onstoolbarbuttonsetting_element=document.querySelector('#ons-toolbar-button-setting');if(onstoolbarbuttonsetting_element){onstoolbarbuttonsetting_element.addEventListener('click',設定ダイアログを表示);page.addEventListener('destroy',function(event){onstoolbarbuttonsetting_element.removeEventListener('click',設定ダイアログを表示)},{'once':!0})}
page.addEventListener('show',溜め込まれてるトピックを表示);page.addEventListener('destroy',function(event){page.removeEventListener('show',溜め込まれてるトピックを表示)},{'once':!0});let onspullhook1_element=document.querySelector('#ons-pull-hook1');if(onspullhook1_element){onspullhook1_element.addEventListener('changestate',プルジェスチャーチェンジ);page.addEventListener('destroy',function(event){onspullhook1_element.removeEventListener('changestate',プルジェスチャーチェンジ)},{'once':!0})}}});document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page3'){let onsbuttonaddnotificationtime_element=document.querySelector('#ons-button-add-notification-time');if(onsbuttonaddnotificationtime_element){onsbuttonaddnotificationtime_element.addEventListener('click',通知時刻の追加ダイアログを開く);page.addEventListener('destroy',function(event){onsbuttonaddnotificationtime_element.removeEventListener('click',通知時刻の追加ダイアログを開く)},{'once':!0})}
let onsbuttonnotificationtimeadd_element=document.querySelector('#ons-button-notification-time-add');if(onsbuttonnotificationtimeadd_element){onsbuttonnotificationtimeadd_element.addEventListener('click',通知時刻を追加);page.addEventListener('destroy',function(event){onsbuttonnotificationtimeadd_element.removeEventListener('click',通知時刻を追加)},{'once':!0})}
let onsbutton3_element=document.querySelector('#ons-button3');if(onsbutton3_element){onsbutton3_element.addEventListener('click',保存データの削除);page.addEventListener('destroy',function(event){onsbutton3_element.removeEventListener('click',保存データの削除)},{'once':!0})}
let onsinputnotificationtime_element=document.querySelector('#ons-input-notification-time');if(onsinputnotificationtime_element){onsinputnotificationtime_element.addEventListener('change',通知時刻のchangeイベント);page.addEventListener('destroy',function(event){onsinputnotificationtime_element.removeEventListener('change',通知時刻のchangeイベント)},{'once':!0})}
page.addEventListener('show',データベースの情報を表示);page.addEventListener('destroy',function(event){page.removeEventListener('show',データベースの情報を表示)},{'once':!0});page.addEventListener('show',通知時刻の表示);page.addEventListener('destroy',function(event){page.removeEventListener('show',通知時刻の表示)},{'once':!0});let onsdialognotificationtime_element=document.querySelector('#ons-dialog-notification-time');if(onsdialognotificationtime_element){onsdialognotificationtime_element.addEventListener('postshow',時間追加ダイアログの表示前イベント);page.addEventListener('destroy',function(event){onsdialognotificationtime_element.removeEventListener('postshow',時間追加ダイアログの表示前イベント)},{'once':!0})}}})