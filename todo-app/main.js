function TODOリストを表示(event){const todoList=document.getElementById('ons-todo-list');const template=document.getElementById('todo-list-template').content;todoList.innerHTML='';todo.forEach(item=>{if(!item.completed){const clone=template.cloneNode(!0);const taskElement=clone.querySelector('.todo-item-title');const timeElement=clone.querySelector('.todo-item-time');taskElement.textContent=item.task;let actualMinutes=0;let actualSeconds=0;if(item.actualTime!==null&&item.actualTime!==undefined&&item.actualTime!==0){actualMinutes=Math.floor(item.actualTime/60);actualSeconds=item.actualTime%60}else{actualMinutes=0;actualSeconds=0}
timeElement.textContent=`推定：${item.time}分　実作業：${actualMinutes}分${actualSeconds}秒`;const listItem=clone.querySelector('.todo-list-item');listItem.addEventListener('click',やることクリック);const editButton=clone.querySelector('.edit-button');editButton.addEventListener('click',編集モードでダイアログを開く);clone.querySelector('.todo-list-item').setAttribute('id',item.id);clone.querySelector('.todo-list-item').setAttribute('data-time',item.time);clone.querySelector('.todo-list-item').setAttribute('data-actual-time',item.actualTime);todoList.appendChild(clone)}});const todoListCount=document.getElementById('todo-list-count');todoListCount.textContent=`(${todo.filter(item => !item.completed).length}件)`}
let todo=[];const storedTodo=localStorage.getItem('todo');if(storedTodo){todo=JSON.parse(storedTodo)}
function TODOを追加(event){const taskName=document.querySelector('#ons-input1').value;const estimatedTime=document.querySelector('#ons-input3').value;if(taskName===''){ons.notification.alert('タスク名は必ず必要です',{title:"エラー"});return}
const todoItemId=document.getElementById('ons-dialog2').getAttribute('data-todo-id');if(todoItemId){const todoIndex=todo.findIndex(item=>item.id===todoItemId);if(todoIndex!==-1){todo[todoIndex].task=taskName;todo[todoIndex].time=estimatedTime}
document.getElementById('ons-dialog2').removeAttribute('data-todo-id')}else{const id=uuid.v4();todo.push({id:id,task:taskName,time:estimatedTime})}
localStorage.setItem('todo',JSON.stringify(todo));TODOリストを表示();const onsDialog2=document.getElementById('ons-dialog2');onsDialog2.hide()}
function ダイアログを開く(event){const onsDialog2=document.getElementById('ons-dialog2');onsDialog2.removeAttribute('data-todo-id');const deleteButton=onsDialog2.querySelector('#ons-button5');deleteButton.style.display='none';const inputs=onsDialog2.querySelectorAll('input');inputs.forEach(input=>{input.value=''});onsDialog2.show()}
function やることページを開く(event){const onsSplitterSide1=document.getElementById('ons-splitter-side1');onsSplitterSide1.close();const onsNavigator2=document.getElementById('ons-navigator2');onsNavigator2.resetToPage('yarukoto.html')}
function 終わったページを開く(event){const onsSplitterSide1=document.getElementById('ons-splitter-side1');onsSplitterSide1.close();const onsNavigator2=document.getElementById('ons-navigator2');onsNavigator2.resetToPage('owatta.html')}
function 編集モードでダイアログを開く(event){event.stopPropagation();const onsDialog2=document.getElementById('ons-dialog2');const todoItem=event.target.closest('.todo-list-item')
const taskName=todoItem.querySelector('.todo-item-title').textContent;const estimatedTime=todoItem.dataset.time
const todoItemId=todoItem.id;const deleteButton=onsDialog2.querySelector('#ons-button5');deleteButton.style.removeProperty('display');const taskInput=onsDialog2.querySelector('#ons-input1');const timeInput=onsDialog2.querySelector('#ons-input3');taskInput.value=taskName;timeInput.value=estimatedTime;onsDialog2.setAttribute('data-todo-id',todoItemId);onsDialog2.show()}
function TODOを削除(event){const todoItemId=document.getElementById('ons-dialog2').getAttribute('data-todo-id');ons.notification.confirm({title:'確認',message:'削除する？',buttonLabels:['はい','いいえ'],callback:(index)=>{if(index===0){todo=todo.filter(item=>item.id!==todoItemId);localStorage.setItem('todo',JSON.stringify(todo));TODOリストを表示();const onsDialog2=document.getElementById('ons-dialog2');onsDialog2.hide()}}})}
function タイマースタート(event){const itemId=window.todoItemId;const todoItem=todo.find(item=>item.id===itemId);let elapsedSeconds=0;if(todoItem&&todoItem.actualTime){elapsedSeconds=todoItem.actualTime}
let timerInterval=setInterval(()=>{elapsedSeconds++;const minutes=Math.floor((elapsedSeconds%3600)/60);const seconds=Math.floor(elapsedSeconds%60);const formattedTime=`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;document.getElementById('timer-display').textContent=formattedTime},1000);window.currentTimerInterval=timerInterval;const startBtn=document.getElementById('start-btn');startBtn.style.display="none";const stopBtn=document.getElementById('stop-btn');stopBtn.style.removeProperty('display');const resetBtn=document.getElementById('reset-btn');resetBtn.style.display="none"}
function やることクリック(event){const itemId=event.target.closest('.todo-list-item').id;const onsNavigator2=document.getElementById('ons-navigator2');onsNavigator2.pushPage('timer.html',{data:{id:itemId}})}
function タイマーページのInit(event){const itemId=event.target.data.id
const todoItem=todo.find(item=>item.id===itemId);if(todoItem){const timerTitle=document.querySelector('.center.timer-title');timerTitle.textContent=todoItem.task;const estimatedTimeElement=document.querySelector('.estimated-time');estimatedTimeElement.textContent=`予定している作業時間： ${todoItem.time}分`;window.todoItemId=itemId;if(todoItem.actualTime){const actualTime=todoItem.actualTime;const minutes=Math.floor((actualTime%3600)/60);const seconds=Math.floor(actualTime%60);const formattedTime=`${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;document.getElementById('timer-display').textContent=formattedTime}}}
function タイマーストップ(event){const timerInterval=window.currentTimerInterval
clearInterval(timerInterval);const timerDisplay=document.getElementById('timer-display');const timeString=timerDisplay.textContent;const[minutes,seconds]=timeString.split(':').map(Number);const actualSeconds=minutes*60+seconds;const todoItemId=window.todoItemId;const todoItem=todo.find(item=>item.id===todoItemId);if(todoItem){todoItem.actualTime=actualSeconds;localStorage.setItem('todo',JSON.stringify(todo))}
const startBtn=document.getElementById('start-btn');startBtn.style.removeProperty('display');const stopBtn=document.getElementById('stop-btn');stopBtn.style.display="none";const resetBtn=document.getElementById('reset-btn');resetBtn.style.removeProperty('display')}
function リセットキャンセル(event){const onsAlertDialog1=document.getElementById('ons-alert-dialog1');onsAlertDialog1.hide()}
function 作業時間リセット(event){const todoItemId=window.todoItemId;const todoItem=todo.find(item=>item.id===todoItemId);if(todoItem){todoItem.actualTime=null;localStorage.setItem('todo',JSON.stringify(todo));document.getElementById('timer-display').textContent='00:00'}
const onsAlertDialog1=document.getElementById('ons-alert-dialog1');onsAlertDialog1.hide()}
function 時間リセットクリック(event){const onsAlertDialog1=document.getElementById('ons-alert-dialog1');onsAlertDialog1.show()}
function タスク完了(event){const onsNavigator2=document.getElementById('ons-navigator2');const itemId=window.todoItemId;const todoItem=todo.find(item=>item.id===itemId);if(todoItem){ons.notification.confirm({message:'タスクを完了しますか？',title:'確認',buttonLabels:['はい','いいえ'],callback:function(index){if(index===0){todoItem.completed=!0;localStorage.setItem('todo',JSON.stringify(todo));ons.notification.alert({message:'タスクを完了しました！',title:'完了',buttonLabel:'OK',callback:function(){onsNavigator2.popPage()}})}}})}}
function 終わったリストを表示(event){const owattaList=document.getElementById('owatta-list');const template=document.getElementById('owatta-item-template').content;owattaList.innerHTML='';todo.forEach(item=>{if(item.completed){const clone=template.cloneNode(!0);const taskElement=clone.querySelector('.todo-item-title');const timeElement=clone.querySelector('.todo-item-time');taskElement.textContent=item.task;let actualMinutes=0;let actualSeconds=0;if(item.actualTime!==null&&item.actualTime!==undefined&&item.actualTime!==0){actualMinutes=Math.floor(item.actualTime/60);actualSeconds=item.actualTime%60}else{actualMinutes=0;actualSeconds=0}
timeElement.textContent=`推定：${item.time}分　実作業：${actualMinutes}分${actualSeconds}秒`;const editButton=clone.querySelector('.edit-button');editButton.addEventListener('click',TODOを戻すか確認ダイアログを表示);clone.querySelector('.todo-list-item').setAttribute('id',item.id);owattaList.appendChild(clone)}});const todoListCount=document.getElementById('owatta-list-count');todoListCount.textContent=`(${todo.filter(item => item.completed).length}件)`}
function TODOを戻すか確認ダイアログを表示(event){const todoItemId=event.target.closest('.todo-list-item').id;const onsAlertDialog2=document.getElementById('ons-alert-dialog2');onsAlertDialog2.setAttribute('data-todo-id',todoItemId);onsAlertDialog2.show()}
function 今日やることに戻すをキャンセル(event){const onsAlertDialog2=document.getElementById('ons-alert-dialog2');onsAlertDialog2.hide()}
function TODOを戻す(event){const todoItemId=document.getElementById('ons-alert-dialog2').getAttribute('data-todo-id');todo.forEach(item=>{if(item.id===todoItemId){item.completed=!1}});localStorage.setItem('todo',JSON.stringify(todo));終わったリストを表示();const onsDialog2=document.getElementById('ons-alert-dialog2');onsDialog2.hide()}
function 管理ページを開く(event){const onsSplitterSide1=document.getElementById('ons-splitter-side1');onsSplitterSide1.close();const onsNavigator2=document.getElementById('ons-navigator2');onsNavigator2.resetToPage('man.html')}
function 終わったリストのクリア(event){ons.notification.confirm({message:'終わったリストをクリアする？',title:'確認',buttonLabels:['はい','いいえ'],callback:function(index){if(index===0){todo=todo.filter(item=>!item.completed);localStorage.setItem('todo',JSON.stringify(todo));ons.notification.alert({message:'終わったリストをクリアしました',title:'完了'});チャート表示()}}})}
function すべてのリストをクリア(event){ons.notification.confirm({message:'すべてのリストをクリアする？',title:'確認',buttonLabels:['はい','いいえ'],callback:function(index){if(index===0){todo=[];localStorage.setItem('todo',JSON.stringify(todo));ons.notification.alert({message:'すべてのリストをクリアしました',title:'完了'});チャート表示()}}})}
function 推定時間でEnter(event){if(event.key==='Enter'){document.getElementById('ons-button3').click()}}
let stackedBarChart=null;let taskStatusChart=null;function チャート表示(event){const plannedTime=todo.filter(item=>!item.completed).reduce((sum,item)=>sum+item.time,0);const actualTime=todo.filter(item=>!item.completed).reduce((sum,item)=>sum+(item.actualTime||0),0);const completedCount=todo.filter(item=>item.completed).length;const uncompletedCount=todo.filter(item=>!item.completed).length;function convertSecondsToCeiledMinutes(seconds){return Math.ceil(seconds/60)}
const labels=todo.map(item=>item.task);const plannedTimesInMinutes=todo.map(item=>item.time);const actualTimesInMinutes=todo.map(item=>convertSecondsToCeiledMinutes(item.actualTime||0));const ctx=document.getElementById('stackedBarChart').getContext('2d');if(stackedBarChart){stackedBarChart.destroy()}
stackedBarChart=new Chart(ctx,{type:'bar',data:{labels:labels,datasets:[{label:'推定時間（分）',data:plannedTimesInMinutes,backgroundColor:'rgba(54, 162, 235, 0.6)',borderColor:'rgba(54, 162, 235, 1)',borderWidth:1,},{label:'実績時間（分）',data:actualTimesInMinutes,backgroundColor:'rgba(255, 99, 132, 0.6)',borderColor:'rgba(255, 99, 132, 1)',borderWidth:1,}]},options:{responsive:!0,scales:{x:{title:{display:!0,text:'タスク'},},y:{title:{display:!0,text:'時間（分）'},beginAtZero:!0,}},plugins:{tooltip:{mode:'index',intersect:!1}}}});const ctx2=document.getElementById('taskStatusChart').getContext('2d');if(taskStatusChart){taskStatusChart.destroy()}
taskStatusChart=new Chart(ctx2,{type:'doughnut',data:{labels:['完了','未完了'],datasets:[{label:'タスク数',data:[completedCount,uncompletedCount],backgroundColor:['rgba(54, 162, 235, 0.2)','rgba(255, 99, 132, 0.2)'],borderColor:['rgba(54, 162, 235, 1)','rgba(255, 99, 132, 1)'],borderWidth:1}]},options:{scales:{y:{beginAtZero:!0}}}})}
function サイドメニューを開く(event){const onsSplitterSide1=document.getElementById('ons-splitter-side1');onsSplitterSide1.open()}
function 初回表示のポップオーバー(event){const onsPopover1=document.getElementById('ons-popover1');const isFirstTime=localStorage.getItem('i0iv7dv-todo-app-isFirstTime');if(isFirstTime===null){onsPopover1.show();localStorage.setItem('i0iv7dv-todo-app-isFirstTime','true')}}
document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page1'){let onsbutton3_element=document.querySelector('#ons-button3');if(onsbutton3_element){onsbutton3_element.addEventListener('click',TODOを追加);page.addEventListener('destroy',function(event){onsbutton3_element.removeEventListener('click',TODOを追加)},{'once':!0})}
let onsbutton5_element=document.querySelector('#ons-button5');if(onsbutton5_element){onsbutton5_element.addEventListener('click',TODOを削除);page.addEventListener('destroy',function(event){onsbutton5_element.removeEventListener('click',TODOを削除)},{'once':!0})}
let onstoolbarbutton1_element=document.querySelector('#ons-toolbar-button1');if(onstoolbarbutton1_element){onstoolbarbutton1_element.addEventListener('click',サイドメニューを開く);page.addEventListener('destroy',function(event){onstoolbarbutton1_element.removeEventListener('click',サイドメニューを開く)},{'once':!0})}
page.addEventListener('show',TODOリストを表示);page.addEventListener('destroy',function(event){page.removeEventListener('show',TODOリストを表示)},{'once':!0});page.addEventListener('show',初回表示のポップオーバー);page.addEventListener('destroy',function(event){page.removeEventListener('show',初回表示のポップオーバー)},{'once':!0});let onsfab1_element=document.querySelector('#ons-fab1');if(onsfab1_element){onsfab1_element.addEventListener('click',ダイアログを開く);page.addEventListener('destroy',function(event){onsfab1_element.removeEventListener('click',ダイアログを開く)},{'once':!0})}}});document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page4'){let startbtn_element=document.querySelector('#start-btn');if(startbtn_element){startbtn_element.addEventListener('click',タイマースタート);page.addEventListener('destroy',function(event){startbtn_element.removeEventListener('click',タイマースタート)},{'once':!0})}
let stopbtn_element=document.querySelector('#stop-btn');if(stopbtn_element){stopbtn_element.addEventListener('click',タイマーストップ);page.addEventListener('destroy',function(event){stopbtn_element.removeEventListener('click',タイマーストップ)},{'once':!0})}
let resetbtn_element=document.querySelector('#reset-btn');if(resetbtn_element){resetbtn_element.addEventListener('click',時間リセットクリック);page.addEventListener('destroy',function(event){resetbtn_element.removeEventListener('click',時間リセットクリック)},{'once':!0})}
let onsbutton6_element=document.querySelector('#ons-button6');if(onsbutton6_element){onsbutton6_element.addEventListener('click',タスク完了);page.addEventListener('destroy',function(event){onsbutton6_element.removeEventListener('click',タスク完了)},{'once':!0})}
タイマーページのInit(event);page.addEventListener('hide',タイマーストップ);page.addEventListener('destroy',function(event){page.removeEventListener('hide',タイマーストップ)},{'once':!0});let onsalertdialogbutton1_element=document.querySelector('#ons-alert-dialog-button1');if(onsalertdialogbutton1_element){onsalertdialogbutton1_element.addEventListener('click',リセットキャンセル);page.addEventListener('destroy',function(event){onsalertdialogbutton1_element.removeEventListener('click',リセットキャンセル)},{'once':!0})}
let onsalertdialogbutton2_element=document.querySelector('#ons-alert-dialog-button2');if(onsalertdialogbutton2_element){onsalertdialogbutton2_element.addEventListener('click',作業時間リセット);page.addEventListener('destroy',function(event){onsalertdialogbutton2_element.removeEventListener('click',作業時間リセット)},{'once':!0})}}});document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page5'){let onsbutton8_element=document.querySelector('#ons-button8');if(onsbutton8_element){onsbutton8_element.addEventListener('click',終わったリストのクリア);page.addEventListener('destroy',function(event){onsbutton8_element.removeEventListener('click',終わったリストのクリア)},{'once':!0})}
let onsbutton9_element=document.querySelector('#ons-button9');if(onsbutton9_element){onsbutton9_element.addEventListener('click',すべてのリストをクリア);page.addEventListener('destroy',function(event){onsbutton9_element.removeEventListener('click',すべてのリストをクリア)},{'once':!0})}
let onstoolbarbutton3_element=document.querySelector('#ons-toolbar-button3');if(onstoolbarbutton3_element){onstoolbarbutton3_element.addEventListener('click',サイドメニューを開く);page.addEventListener('destroy',function(event){onstoolbarbutton3_element.removeEventListener('click',サイドメニューを開く)},{'once':!0})}
page.addEventListener('show',チャート表示);page.addEventListener('destroy',function(event){page.removeEventListener('show',チャート表示)},{'once':!0})}});document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page2'){let onslistitem1_element=document.querySelector('#ons-list-item1');if(onslistitem1_element){onslistitem1_element.addEventListener('click',やることページを開く);page.addEventListener('destroy',function(event){onslistitem1_element.removeEventListener('click',やることページを開く)},{'once':!0})}
let onslistitem2_element=document.querySelector('#ons-list-item2');if(onslistitem2_element){onslistitem2_element.addEventListener('click',終わったページを開く);page.addEventListener('destroy',function(event){onslistitem2_element.removeEventListener('click',終わったページを開く)},{'once':!0})}
let onslistitem5_element=document.querySelector('#ons-list-item5');if(onslistitem5_element){onslistitem5_element.addEventListener('click',管理ページを開く);page.addEventListener('destroy',function(event){onslistitem5_element.removeEventListener('click',管理ページを開く)},{'once':!0})}}});document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page3'){let onstoolbarbutton2_element=document.querySelector('#ons-toolbar-button2');if(onstoolbarbutton2_element){onstoolbarbutton2_element.addEventListener('click',サイドメニューを開く);page.addEventListener('destroy',function(event){onstoolbarbutton2_element.removeEventListener('click',サイドメニューを開く)},{'once':!0})}
page.addEventListener('show',終わったリストを表示);page.addEventListener('destroy',function(event){page.removeEventListener('show',終わったリストを表示)},{'once':!0});let onsalertdialogbutton3_element=document.querySelector('#ons-alert-dialog-button3');if(onsalertdialogbutton3_element){onsalertdialogbutton3_element.addEventListener('click',今日やることに戻すをキャンセル);page.addEventListener('destroy',function(event){onsalertdialogbutton3_element.removeEventListener('click',今日やることに戻すをキャンセル)},{'once':!0})}
let onsalertdialogbutton4_element=document.querySelector('#ons-alert-dialog-button4');if(onsalertdialogbutton4_element){onsalertdialogbutton4_element.addEventListener('click',TODOを戻す);page.addEventListener('destroy',function(event){onsalertdialogbutton4_element.removeEventListener('click',TODOを戻す)},{'once':!0})}}})