function 設定値(){}
const urlBase='https://ncode.syosetu.com';const fetchBase='https://script.google.com/macros/s/AKfycbwqwwbtT_VEFRCfwR4D_jL0tcnXlWTcZiNPx7Xn5M_YPlFfTV3IP2DMzuoSGNcujpgT0w/exec'
const DB_NAME="n-daily-db";const DB_VERSION=1;const APP_SETTING_STORE_NAME="settings";const READING_HISTORY_STORE_NAME="readingHistory";const AHEAD_PAGES_STORE_NAME="aheadPages";async function DB初期化(){const localStorageVolume=localStorage.getItem('volume');const localStorageRate=localStorage.getItem('rate');const localStorageVoice=localStorage.getItem('voice');const localStoragePageAheadCount=localStorage.getItem('pageAheadCount');const localStorageWakeLock=localStorage.getItem('wakeLock');let db=null;try{db=await openDB();const volume=await getStoreValue(db,APP_SETTING_STORE_NAME,'volume');if(!volume){if(localStorageVolume){await putStoreValue(db,APP_SETTING_STORE_NAME,{key:'volume',value:localStorageVolume})}else{await putStoreValue(db,APP_SETTING_STORE_NAME,{key:'volume',value:100})}}
const rate=await getStoreValue(db,APP_SETTING_STORE_NAME,'rate');if(!rate){if(localStorageRate){await putStoreValue(db,APP_SETTING_STORE_NAME,{key:'rate',value:localStorageRate})}else{await putStoreValue(db,APP_SETTING_STORE_NAME,{key:'rate',value:1})}}
const voice=await getStoreValue(db,APP_SETTING_STORE_NAME,'voice');if(!voice){if(localStorageVoice){await putStoreValue(db,APP_SETTING_STORE_NAME,{key:'voice',value:localStorageVoice})}else{await putStoreValue(db,APP_SETTING_STORE_NAME,{key:'voice',value:""})}}
const pageAheadCount=await getStoreValue(db,APP_SETTING_STORE_NAME,'pageAheadCount');if(!pageAheadCount){if(localStoragePageAheadCount){await putStoreValue(db,APP_SETTING_STORE_NAME,{key:'pageAheadCount',value:localStoragePageAheadCount})}else{await putStoreValue(db,APP_SETTING_STORE_NAME,{key:'pageAheadCount',value:0})}}
const wakeLock=await getStoreValue(db,APP_SETTING_STORE_NAME,'wakeLock');if(!wakeLock){if(localStorageWakeLock){await putStoreValue(db,APP_SETTING_STORE_NAME,{key:'wakeLock',value:localStorageWakeLock})}else{await putStoreValue(db,APP_SETTING_STORE_NAME,{key:'wakeLock',value:0})}}
let originReadingHistory=JSON.parse(localStorage.getItem('readingHistory'))||{};let originAheadPages=JSON.parse(localStorage.getItem('aheadPages'))||{};const readingHistory=await getAllStoreValue(db,READING_HISTORY_STORE_NAME);const aheadPages=await getAllStoreValue(db,AHEAD_PAGES_STORE_NAME);if(readingHistory.length===0){for(const url in originReadingHistory){putStoreValue(db,READING_HISTORY_STORE_NAME,{url:url,...originReadingHistory[url]})}}
if(aheadPages.length===0){for(const url in originAheadPages){putStoreValue(db,AHEAD_PAGES_STORE_NAME,{url:url,pages:originAheadPages[url]})}}
localStorage.removeItem('volume');localStorage.removeItem('rate');localStorage.removeItem('voice');localStorage.removeItem('pageAheadCount');localStorage.removeItem('wakeLock');localStorage.removeItem('readingHistory');localStorage.removeItem('aheadPages')}catch(error){alert(`DBの初期化でエラーが発生しました: ${error}`);throw error}finally{if(db)await closeDB(db);}}
async function openDB(){return new Promise((resolve,reject)=>{const request=indexedDB.open(DB_NAME,DB_VERSION);request.onerror=(event)=>{reject(event)};request.onsuccess=(event)=>{resolve(event.target.result)};request.onupgradeneeded=(event)=>{const db=event.target.result;if(DB_VERSION===1){if(!db.objectStoreNames.contains(APP_SETTING_STORE_NAME)){db.createObjectStore(APP_SETTING_STORE_NAME,{keyPath:"key"})}
if(!db.objectStoreNames.contains(READING_HISTORY_STORE_NAME)){db.createObjectStore(READING_HISTORY_STORE_NAME,{keyPath:"url"})}
if(!db.objectStoreNames.contains(AHEAD_PAGES_STORE_NAME)){db.createObjectStore(AHEAD_PAGES_STORE_NAME,{keyPath:"url"})}}}})}
async function putStoreValue(db,storeName,value){return new Promise((resolve,reject)=>{const tx=db.transaction(storeName,'readwrite');const store=tx.objectStore(storeName);const request=store.put(value);request.onsuccess=(event)=>{resolve(event.target.result)};request.onerror=(event)=>{reject(event.target.error)};tx.oncomplete=()=>{};tx.onerror=(event)=>{reject(event.target.error)};tx.onabort=(event)=>{reject(new Error(`Transaction aborted: ${event.target.error?.message || 'Unknown reason'}`))}})}
async function getStoreValue(db,storeName,key){return new Promise((resolve,reject)=>{const tx=db.transaction(storeName,'readonly');const store=tx.objectStore(storeName);const request=store.get(key);request.onsuccess=(event)=>{resolve(event.target.result)};request.onerror=(event)=>{reject(event.target.error)};tx.oncomplete=()=>{};tx.onerror=(event)=>{reject(event.target.error)};tx.onabort=(event)=>{reject(new Error(`Transaction aborted: ${event.target.error?.message || 'Unknown reason'}`))}})}
async function getAllStoreValue(db,storeName){return new Promise((resolve,reject)=>{const tx=db.transaction(storeName,'readonly');const store=tx.objectStore(storeName);const request=store.getAll();request.onsuccess=(event)=>{resolve(event.target.result)};request.onerror=(event)=>{reject(event.target.error)};tx.oncomplete=()=>{};tx.onerror=(event)=>{reject(event.target.error)};tx.onabort=(event)=>{reject(new Error(`Transaction aborted: ${event.target.error?.message || 'Unknown reason'}`))}})}
async function deleteStoreValue(db,storeName,key){return new Promise((resolve,reject)=>{const tx=db.transaction(storeName,'readwrite');const store=tx.objectStore(storeName);const request=store.delete(key);request.onsuccess=(event)=>{resolve(event.target.result)};tx.onerror=(event)=>{reject(event.target.error)};tx.onabort=(event)=>{reject(new Error(`Transaction aborted: ${event.target.error?.message || 'Unknown reason'}`))}})}
async function closeDB(db){return new Promise((resolve,reject)=>{db.close();resolve()})}
async function 作品一覧表示(event){let db=null;try{db=await openDB();const readingHistories=await getAllStoreValue(db,READING_HISTORY_STORE_NAME)||{};const aheadPagies=await getAllStoreValue(db,AHEAD_PAGES_STORE_NAME)||{};const now=new Date();const nowJST=new Date(now.toLocaleString('ja-JP',{timeZone:'Asia/Tokyo'}));const thirtyDaysAgoJST=new Date(nowJST.getTime()-(30*24*60*60*1000))}catch(error){ons.notification.alert(error)}finally{if(db)closeDB(db);}
const onsModal1=document.getElementById('ons-modal1');onsModal1.show();try{const narouList=document.getElementById('narou-list');narouList.innerHTML='';const onsSegment1=document.getElementById('ons-segment1');let pageLocation=0;if(event.activeIndex!==undefined){pageLocation=event.activeIndex}else{pageLocation=onsSegment1.activeIndex}
const response=await fetch(fetchBase+'?action=list&page='+(pageLocation+1));const data=await response.text();const parsedData=Papa.parse(data,{header:!0,skipEmptyLines:!0}).data;parsedData.forEach((item,index)=>{const narouItemTemplate=document.getElementById('narou-item-template').cloneNode(!0);let narouItem=narouItemTemplate.content;narouItem.querySelector('.narou-item-title').textContent=item.タイトル;narouItem.querySelector('.narou-item-info').textContent=item.作品情報;narouItem.querySelector('.narou-item').setAttribute('title',item.タイトル);narouItem.querySelector('.narou-item').setAttribute('info',item.作品情報);narouItem.querySelector('.narou-item').setAttribute('status',item.連載状態);narouItem.querySelector('.narou-item').setAttribute('episode-count',item.話数);narouItem.querySelector('.narou-item').setAttribute('url',item.URL);narouItem.querySelector('.narou-item').setAttribute('ncode',item.ncode);narouItem.querySelector('.narou-item-number').textContent=pageLocation*50+index+1;narouItem.querySelector('.narou-item').addEventListener('click',(e)=>{なろう詳細ページへ飛ぶ(e)});let mouseDownTimer=null;let mouseX=null;let mouseY=null;let isMouseDown=!1;function resetMouseDownInfo(){if(mouseDownTimer){clearTimeout(mouseDownTimer)}
mouseDownTimer=null;mouseX=null;mouseY=null;isMouseDown=!1}
function isWithinPx(x,y){const ret=Math.abs(mouseX-x)<=30&&Math.abs(mouseY-y)<=30;return ret}
narouItem.querySelector('.narou-item').addEventListener('mousedown',(e)=>{mouseX=e.clientX;mouseY=e.clientY;isMouseDown=!0;mouseDownTimer=setTimeout(()=>{作品長押し(e);resetMouseDownInfo()},500)});narouItem.querySelector('.narou-item').addEventListener('mousemove',(e)=>{if(!isWithinPx(e.clientX,e.clientY)){resetMouseDownInfo()}});narouItem.querySelector('.narou-item').addEventListener('mouseup',(e)=>{resetMouseDownInfo()});narouItem.querySelector('.narou-item').addEventListener('touchstart',(e)=>{mouseX=e.touches[0].clientX;mouseY=e.touches[0].clientY;mouseDownTimer=setTimeout(()=>{作品長押し(e);if(navigator.vibrate){navigator.vibrate(50)}
resetMouseDownInfo()},500)});narouItem.querySelector('.narou-item').addEventListener('touchmove',(e)=>{if(!isWithinPx(e.touches[0].clientX,e.touches[0].clientY)){resetMouseDownInfo()}});narouItem.querySelector('.narou-item').addEventListener('touchend',(e)=>{resetMouseDownInfo()});if(index%2===0){narouItem.querySelector('.narou-item').classList.add('narou-item-even')}else{narouItem.querySelector('.narou-item').classList.add('narou-item-odd')}
narouList.appendChild(narouItem)});アイコンの更新()}catch(error){ons.notification.alert('作品一覧の取得に失敗しました。しばらく時間を置いて再度試してください。')
throw error}finally{onsModal1.hide()}}
function なろう詳細ページへ飛ぶ(e){const narouItem=e.target.closest('.narou-item');const ncode=narouItem.getAttribute('ncode');const url=narouItem.getAttribute('url');const title=narouItem.getAttribute('title');const status=narouItem.getAttribute('status');const episodeCount=narouItem.getAttribute('episode-count');const onsNavigator1=document.getElementById('ons-navigator1');onsNavigator1.pushPage('reader.html',{data:{ncode:ncode,url:url,title:title,status:status,episodeCount:episodeCount===""?1:Number(episodeCount),}})}
async function なろう詳細ページのShow(event){setLoadingIndicator(!0);const ncode=event.target.data.ncode;const title=event.target.data.title;const status=event.target.data.status;const episodeCount=event.target.data.episodeCount===""?1:Number(event.target.data.episodeCount);const url=event.target.data.url;let currentPage=1;let currentRow=1;let totalRowCount=0;let totalEpisodeCount=episodeCount;let db=null;try{db=await openDB();const history=await getStoreValue(db,READING_HISTORY_STORE_NAME,url);if(history){currentPage=history.currentEpisode;currentRow=history.currentRow;totalRowCount=history.totalRowCount;totalEpisodeCount=episodeCount;history.totalEpisodeCount=episodeCount;if(currentPage===0)history.currentEpisode=1}
setupPageInfo(title,status,episodeCount,url);const selectElement=document.getElementById('ons-select1');if(currentPage!==0){selectElement.selectedIndex=currentPage-1}
const aheadPage=await await getStoreValue(db,AHEAD_PAGES_STORE_NAME,url)||{url:url,pages:{}};if(aheadPage.pages[currentPage]){const compressData=aheadPage.pages[currentPage];const data=LZString.decompress(compressData);displayData(JSON.parse(data))}else{await fetchDataAndDisplayByPage(ncode,status,currentPage)}
if(currentRow>0&&currentRow<totalRowCount){const detailList=document.getElementById('detail-list');const listItems=detailList.querySelectorAll('.list-item_p');listItems[currentRow-1].classList.add('voice-speeching');listItems[currentRow-1].scrollIntoView({behavior:'smooth',block:'center'})}}finally{setLoadingIndicator(!1);pageButtonControl(currentPage,totalEpisodeCount);if(db)await closeDB(db);}}
function なろう詳細共通(){}
function setupPageInfo(title,status,episodeCount,url){const onsListHeaderLink=document.getElementById('ons-list-header-link');onsListHeaderLink.textContent=title;onsListHeaderLink.href=url;const onsSelect1=document.getElementById('ons-select1');if(status==='短編'){onsSelect1.style.display='none'}else{const select1=onsSelect1.querySelector('.select-input');select1.innerHTML='';for(let i=1;i<=episodeCount;i++){const option=document.createElement('option');option.value=i;option.text=`ページ - ${i}`;select1.appendChild(option)}}}
function pageButtonControl(currentPage,episodeCount){const prevPageButton=document.getElementById('prev-page-button');if(currentPage===1){prevPageButton.disabled=!0}else{prevPageButton.disabled=!1}
const nextPageButton=document.getElementById('next-page-button');if(currentPage===episodeCount){nextPageButton.disabled=!0}else{nextPageButton.disabled=!1}}
async function fetchData(ncode,status,page){const type=status==='短編'?'short':'long';const nPath=status==='短編'?ncode:`${ncode}/${page}`;let text="";try{const response=await fetch(`${fetchBase}?action=detail&type=${type}&nPath=${nPath}`)
text=await response.text();if(text.includes('<title>ページが見つかりません</title>')){throw new Error('ページが見つかりません')}}catch(error){ons.notification.alert('エピソードの取得に失敗しました。しばらく時間を置いて再度試してください。')
throw error}
return text}
function displayData(data){const narouReadListItem=document.getElementById('detail-list');narouReadListItem.innerHTML='';const lines=data.split('\n');lines.forEach(line=>{if(line.trim()!==''){const narouReadItemTemplate=document.getElementById('narou-read-item-template').cloneNode(!0);const narouReadItem=narouReadItemTemplate.content;narouReadItem.querySelector('ons-list-item').addEventListener('click',読み上げ行に設定);narouReadItem.querySelector('.list-item_p').textContent=line;narouReadListItem.appendChild(narouReadItem)}})}
async function fetchDataAndDisplayByPage(ncode,status,page){const narouReadListItem=document.getElementById('detail-list');narouReadListItem.innerHTML='';const data=await fetchData(ncode,status,page);displayData(data)}
function setLoadingIndicator(isLoading){const onsModal2=document.getElementById('ons-modal2');onsModal2.visible=isLoading;const prevPageButton=document.getElementById('prev-page-button');prevPageButton.disabled=isLoading;const onsSelect1=document.getElementById('ons-select1');onsSelect1.disabled=isLoading;const playButton=document.getElementById('play-button');playButton.disabled=isLoading;const nextPageButton=document.getElementById('next-page-button');nextPageButton.disabled=isLoading}
async function ページ選択(event){const page=event.target.closest('ons-page');const ncode=page.data.ncode;const status=page.data.status;const title=page.data.title;const episodeCount=page.data.episodeCount;let url=`${urlBase}/${ncode}/`;const selectedPage=Number(event.target.value);if(!selectedPage)return;document.getElementById('ons-list-header2').scrollIntoView();setLoadingIndicator(!0);let db=null;try{db=await openDB();const aheadPage=await getStoreValue(db,AHEAD_PAGES_STORE_NAME,url)||{url:url,pages:{}};if(aheadPage.pages[selectedPage]){const compressData=aheadPage.pages[selectedPage];const data=LZString.decompress(compressData);displayData(JSON.parse(data))}else{await fetchDataAndDisplayByPage(ncode,status,selectedPage)}
pageButtonControl(selectedPage,episodeCount)
if(window.reading===!0){読み上げ開始()}
ページ先読み(ncode)}finally{setLoadingIndicator(!1);pageButtonControl(selectedPage,episodeCount);closeDB(db)}}
function 前のページへ移動(event){const selectElement=document.querySelector('#select1');const selectedIndex=selectElement.selectedIndex;if(selectedIndex>0){selectElement.selectedIndex=selectedIndex-1;const event=new Event('change',{bubbles:!0,cancelable:!0});selectElement.dispatchEvent(event)}}
function 次のページに移動(event){const selectElement=document.querySelector('#select1');const selectedIndex=selectElement.selectedIndex;if(selectedIndex<selectElement.options.length-1){selectElement.selectedIndex=selectedIndex+1;const event=new Event('change',{bubbles:!0,cancelable:!0});selectElement.dispatchEvent(event)}}
function 読み上げページ初期化(event){setLoadingIndicator(!0)}
function 読み上げ開始(event){const detailList=document.getElementById('detail-list');const listItems=detailList.querySelectorAll('.list-item_p');const page=detailList.closest('ons-page');const ncode=detailList.closest('ons-page').data.ncode;const episodeCount=page.data.episodeCount===""?1:page.data.episodeCount;const episodeStatus=page.data.status;ページ先読み(ncode);let currentIndex=0;const voiceSpeechingItems=detailList.querySelectorAll('.voice-speeching');if(voiceSpeechingItems.length>0){currentIndex=Array.from(listItems).indexOf(voiceSpeechingItems[0])}
async function readNextItem(){if(currentIndex<listItems.length){const listItem=listItems[currentIndex];const text=listItem.textContent;const textToRead=text.replace(/\|([^《]+)《([^》]+)》/g,' $2');const utterance=new SpeechSynthesisUtterance(textToRead);utterance.lang="ja-JP";let rate=1;let volume=0.1;let voice="";let db=null;try{db=await openDB();rate=await getStoreValue(db,APP_SETTING_STORE_NAME,'rate');rate=rate.value;volume=await getStoreValue(db,APP_SETTING_STORE_NAME,'volume');volume=volume.value;voice=await getStoreValue(db,APP_SETTING_STORE_NAME,'voice');voice=voice.value}finally{if(db)await closeDB(db);}
utterance.rate=parseFloat(rate)||1;utterance.volume=parseFloat(volume)/100;utterance.voice=speechSynthesis.getVoices().filter(voice=>voice.name===voice)[0];speechSynthesis.speak(utterance);listItem.classList.add('voice-speeching');utterance.onend=()=>{listItem.scrollIntoView({behavior:'smooth',block:'center'});listItem.classList.remove('voice-speeching');currentIndex++;saveReadingHistory(page.data.url,currentIndex,listItems.length,episodeCount,episodeStatus);readNextItem()}}else{if(document.getElementById('next-page-button').disabled===!1){document.getElementById('next-page-button').click()}else{読み上げ停止();ons.notification.confirm({title:'評価しますか？',message:'サイトに移動して★をつけましょう',buttonLabels:['いいえ','はい'],cancelable:!0,id:"hyouka-confirm",callback:function(answer){if(answer===1){const selectedPage=document.getElementById('ons-select1').value;const targetUrl=`${urlBase}/${ncode}/${selectedPage}#novel_hyouka`;window.open(targetUrl,'_blank')}}})}}}
document.getElementById('play-button').style.display='none';document.getElementById('pause-button').style.display='flex';window.reading=!0;if(navigator.wakeLock){navigator.wakeLock.request('screen').then(wakeLock=>{window.screenWakeLock=wakeLock}).catch(err=>{console.error('Wake Lock API error: ',err)})}
readNextItem()}
async function saveReadingHistory(url,readCount,totalCount,episodeCount,episodeStatus){const onsListHeaderLink=document.getElementById('ons-list-header-link');let readingHistory={};let db=null;try{db=await openDB();const currentPage=document.getElementById('ons-select1').selectedIndex===-1?1:document.getElementById('ons-select1').selectedIndex+1;const timestamp=new Date().toLocaleString('ja-JP',{timeZone:'Asia/Tokyo'});readingHistory=await getStoreValue(db,READING_HISTORY_STORE_NAME,url)||{url:url};if(readingHistory){readingHistory.title=onsListHeaderLink.textContent;readingHistory.totalEpisodeCount=episodeCount===""?0:Number(episodeCount);readingHistory.currentEpisode=currentPage===""?0:Number(currentPage);readingHistory.totalRowCount=totalCount;readingHistory.currentRow=readCount;readingHistory.status=readCount===totalCount?'Done':readCount===0?'Unread':'Reading';readingHistory.episodeStatus=episodeStatus;readingHistory.lastUpdated=timestamp}
await putStoreValue(db,READING_HISTORY_STORE_NAME,readingHistory)}finally{if(db)await closeDB(db);}}
function 読み上げ停止(event){if(window.reading){speechSynthesis.cancel();document.getElementById('pause-button').style.display='none';document.getElementById('play-button').style.display='flex';window.reading=!1;if(window.screenWakeLock){window.screenWakeLock.release().then(()=>{window.screenWakeLock=null})}}}
async function 読み上げ設定(event){let db=null;let volume=null;let rate=null;let pageAheadCount=null;let wakeLock=null;try{db=await openDB();const volumeObj=await getStoreValue(db,APP_SETTING_STORE_NAME,"volume");volume=volumeObj.value;const rateObj=await getStoreValue(db,APP_SETTING_STORE_NAME,"rate");rate=rateObj.value;const pageAheadCountObj=await getStoreValue(db,APP_SETTING_STORE_NAME,"pageAheadCount");pageAheadCount=pageAheadCountObj.value;const wakeLockObj=await getStoreValue(db,APP_SETTING_STORE_NAME,"wakeLock");wakeLock=wakeLockObj.value}finally{if(db)await closeDB(db);}
const dialog=document.createElement('ons-dialog');dialog.innerHTML=`
<div id="div44" style="padding: 20px;">
  <div id="div45" style="justify-content: center; display:flex;">
    読み上げ設定
  </div>
  <ons-list id="ons-list2">
    <ons-list-item id="ons-list-item9" style="
    display: flex;
">
      <label id="label3" class="list-item__label">
        音量
      </label>
      <div id="div46" class="right">
        <span id="span1">
          ${volume || 50}
        </span>
      </div>
      <ons-range id="volume-range" value="${volume || 50}" min="0" max="100" step="10" style="
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: auto;
    order: 1;
    align-self: auto;
  ">
      </ons-range>
    </ons-list-item>
    <ons-list-item id="ons-list-item10" style="
    display: flex;
">
      <label id="label4" class="list-item__label">
        速度
      </label>
      <div id="div47" class="right">
        <span id="span2">
          ${rate || 1}
        </span>
      </div>
      <ons-range id="rate-range" value="${rate || 1}" min="0.25" max="5.0" step="0.25" style="
    flex-grow: 1;
    flex-shrink: 1;
    flex-basis: auto;
    order: 1;
    align-self: auto;
  ">
      </ons-range>
    </ons-list-item>
    <ons-list-item id="ons-list-item11" style="
    display: flex;
">
      <label id="label5" class="list-item__label">
        声
      </label>
      <div id="div48" class="right">
        <select id="voice-select">
          ${getJapaneseVoices().map(voice => `<option value="${voice.name}">${voice.name}</option>`).join('')}
        </select>
      </div>
    </ons-list-item>

    <ons-list-item id="ons-list-item13" style="display: flex;">
      <label id="label7" class="list-item__label">
        ページ先読み数
      </label>
      <div id="div51" class="right">
        <ons-input type="number" id="page-read-ahead" value="${pageAheadCount || 0}" min="0">
      </div>
    </ons-list-item>

    
    <ons-list-item id="ons-list-item12" style="
    display: flex;
">
      <label id="label6" class="list-item__label">
        画面ロック防止
      </label>
      <div id="div49" class="right">
        <ons-checkbox id="wake-lock-checkbox" ${wakeLock === 'true' ? 'checked="checked"' : ''}>
        </ons-checkbox>
      </div>
    </ons-list-item>
  </ons-list>
  <div id="div50" style="display: flex; justify-content: center;">
    <ons-button id="dialog-button">
      OK
    </ons-button>
  </div>
</div>
    `;dialog.cancelable=!0;document.body.appendChild(dialog);dialog.show();dialog.querySelector('#dialog-button').addEventListener('click',async()=>{const volume=dialog.querySelector('#volume-range').value;const rate=dialog.querySelector('#rate-range').value;const voice=dialog.querySelector('#voice-select').value;const pageAheadCount=dialog.querySelector('#page-read-ahead').value;const wakeLock=dialog.querySelector('#wake-lock-checkbox').checked;let db=null;try{db=await openDB();await putStoreValue(db,APP_SETTING_STORE_NAME,{key:"volume",value:volume});await putStoreValue(db,APP_SETTING_STORE_NAME,{key:"rate",value:rate});await putStoreValue(db,APP_SETTING_STORE_NAME,{key:"pageAheadCount",value:pageAheadCount});await putStoreValue(db,APP_SETTING_STORE_NAME,{key:"wakeLock",value:wakeLock})}finally{if(db)await closeDB(db);}
dialog.hide()});requestAnimationFrame(()=>{dialog.querySelector('#wake-lock-checkbox').checked=wakeLock});dialog.querySelector('#volume-range').addEventListener('input',(event)=>{dialog.querySelector('#span1').textContent=event.target.value});dialog.querySelector('#rate-range').addEventListener('input',(event)=>{dialog.querySelector('#span2').textContent=event.target.value})}
function getJapaneseVoices(){const speechSynthesis=window.speechSynthesis;const voices=speechSynthesis.getVoices();const japaneseVoices=voices.filter(voice=>{return voice.lang==='ja-JP'||voice.lang.startsWith('ja-')});return japaneseVoices}
function 読み上げ行に設定(event){const detailList=document.getElementById('detail-list');const listItems=detailList.querySelectorAll('.list-item_p');listItems.forEach(listItem=>{listItem.classList.remove('voice-speeching')});const parent=event.target.closest('ons-list-item');const target=parent.querySelector('.list-item_p');target.classList.add('voice-speeching');if(window.reading===!0){読み上げ停止()}else{読み上げ開始()}}
function ヒストリー消去(event){window.history.back()}
function バックボタン処理(event){const onsNavigator1=document.getElementById('ons-navigator1');onsNavigator1.popPage()}
async function アイコンの更新(event){const narouList=document.getElementById('narou-list');const narouItems=narouList.querySelectorAll('.narou-item');let readingHistories={};let db=null;try{db=await openDB(db);readingHistories=await getAllStoreValue(db,READING_HISTORY_STORE_NAME)}finally{if(db)await closeDB(db);}
narouItems.forEach(narouItem=>{const url=narouItem.getAttribute('url');const historyItem=readingHistories.find(v=>v.url===url);let readingStatus='Unread';let totalEpisodeCount=1;let currentEpisode=1;if(historyItem){readingStatus=historyItem.status!==undefined?historyItem.status:'Unread';totalEpisodeCount=historyItem.totalEpisodeCount!==undefined?historyItem.totalEpisodeCount:1;currentEpisode=historyItem.currentEpisode!==undefined?historyItem.currentEpisode:1}
if(readingStatus=='Done'&&totalEpisodeCount!==currentEpisode){readingStatus='Reading'}
const icon=narouItem.querySelector('.narou-item-icon');if(readingStatus==='Reading'){icon.setAttribute('icon','fa-book-open');icon.style.color="#eb9d9d"}else if(readingStatus==='Done'){icon.setAttribute('icon','fa-check');icon.style.color="green"}else{icon.setAttribute('icon','fa-book');icon.style.color="rgb(175, 175, 175)"}})}
const sleep=(time)=>new Promise((resolve)=>setTimeout(resolve,time));async function ページ先読み(ncode){let readingHistory={};let aheadPage={};let pageAheadCount=0;let db=null;const url=`${urlBase}/${ncode}/`;try{db=await openDB(db);pageAheadCount=(await getStoreValue(db,APP_SETTING_STORE_NAME,"pageAheadCount"))?.value||0;readingHistory=await getStoreValue(db,READING_HISTORY_STORE_NAME,url)||{url:url};aheadPage=await getStoreValue(db,AHEAD_PAGES_STORE_NAME,url)||{url:url,pages:{}}}finally{if(db)await closeDB(db);}
const page=document.querySelector('#ons-page2');if(page.data.status==='短編')return;pageAheadCount=parseInt(pageAheadCount);const currentPage=parseInt(document.getElementById('ons-select1').value)||1;const totalEpisodeCount=readingHistory?readingHistory.totalEpisodeCount:1;for(let i=currentPage;i<=currentPage+pageAheadCount&&i<=totalEpisodeCount;i++){if(aheadPage.pages[i]){continue}
try{const data=await fetchData(ncode,'',i);const compressText=LZString.compress(JSON.stringify(data));aheadPage.pages[i]=compressText;try{db=await openDB(db);await putStoreValue(db,AHEAD_PAGES_STORE_NAME,aheadPage)}finally{if(db)await closeDB(db);}
await sleep(10000)}catch(e){console.log('エラー発生');break}}}
async function 作品長押し(event){const target=event.target.closest('ons-list-item');const url=target.getAttribute('url');const title=target.getAttribute('title');const dialog=document.createElement('ons-dialog');let aheadPages={};let db=null;try{db=await openDB();aheadPages=await getStoreValue(db,AHEAD_PAGES_STORE_NAME,url)||{url:url,pages:[]}}finally{if(db)await closeDB(db);}
const aheadPageData=aheadPages.pages;const aheadPageCount=aheadPageData?Object.keys(aheadPageData).length:0;const onsDialogEpisodeDelete=document.getElementById('ons-dialog-episode-delete');onsDialogEpisodeDelete.dataset.url=url;onsDialogEpisodeDelete.dataset.title=title;onsDialogEpisodeDelete.dataset.aheadPageCount=aheadPageCount;onsDialogEpisodeDelete.show()}
function 左にスワイプ(event){if(event.target.closest('#narou-list')){const onsSegment1=document.getElementById('ons-segment1');let index=onsSegment1.activeIndex;if(index<5){onsSegment1.setActiveButton(index+1)}}}
function 右にスワイプ(event){if(event.target.closest('#narou-list')){const onsSegment1=document.getElementById('ons-segment1');let index=onsSegment1.activeIndex;if(index>0){onsSegment1.setActiveButton(index-1)}}}
function 評価ダイアログを閉じる(event){const confirm=document.getElementById('hyouka-confirm');if(confirm){confirm.remove()}}
function 履歴ページに移動(event){const onsNavigator1=document.getElementById('ons-navigator1');onsNavigator1.pushPage("history.html")}
function ヒストリー追加(event){try{history.pushState({},'','')}catch(e){}}
async function 履歴一覧表示(event){const narouHistoryList=document.getElementById('ons-list-narou-history');narouHistoryList.innerHTML='';let db=null;try{db=await openDB();let readingHistories=await getAllStoreValue(db,READING_HISTORY_STORE_NAME)||[];readingHistories.sort((a,b)=>{return new Date(b.lastUpdated)-new Date(a.lastUpdated)});for(const index in readingHistories){const readingHistory=readingHistories[index];const narouItemTemplate=document.getElementById('template-history-item').cloneNode(!0);let narouItem=narouItemTemplate.content;if(!readingHistory.title)continue;narouItem.querySelector('.narou-item-title').textContent=readingHistory.title;narouItem.querySelector('.narou-item-info').textContent=readingHistory.status;narouItem.querySelector('.narou-item').setAttribute('title',readingHistory.title);narouItem.querySelector('.narou-item').setAttribute('info',readingHistory.status);narouItem.querySelector('.narou-item').setAttribute('status',readingHistory.episodeStatus);narouItem.querySelector('.narou-item').setAttribute('episode-count',readingHistory.totalEpisodeCount);narouItem.querySelector('.narou-item').setAttribute('url',readingHistory.url);narouItem.querySelector('.narou-item').setAttribute('ncode',readingHistory.url.split("/")[3]);narouItem.querySelector('.narou-item').addEventListener('click',(e)=>{なろう詳細ページへ飛ぶ(e)});let mouseDownTimer=null;let mouseX=null;let mouseY=null;let isMouseDown=!1;function resetMouseDownInfo(){if(mouseDownTimer){clearTimeout(mouseDownTimer)}
mouseDownTimer=null;mouseX=null;mouseY=null;isMouseDown=!1}
function isWithinPx(x,y){const ret=Math.abs(mouseX-x)<=30&&Math.abs(mouseY-y)<=30;return ret}
narouItem.querySelector('.narou-item').addEventListener('mousedown',(e)=>{mouseX=e.clientX;mouseY=e.clientY;isMouseDown=!0;mouseDownTimer=setTimeout(()=>{履歴長押し(e);resetMouseDownInfo()},500)});narouItem.querySelector('.narou-item').addEventListener('mousemove',(e)=>{if(!isWithinPx(e.clientX,e.clientY)){resetMouseDownInfo()}});narouItem.querySelector('.narou-item').addEventListener('mouseup',(e)=>{resetMouseDownInfo()});narouItem.querySelector('.narou-item').addEventListener('touchstart',(e)=>{mouseX=e.touches[0].clientX;mouseY=e.touches[0].clientY;mouseDownTimer=setTimeout(()=>{履歴長押し(e);if(navigator.vibrate){navigator.vibrate(50)}
resetMouseDownInfo()},500)});narouItem.querySelector('.narou-item').addEventListener('touchmove',(e)=>{if(!isWithinPx(e.touches[0].clientX,e.touches[0].clientY)){resetMouseDownInfo()}});narouItem.querySelector('.narou-item').addEventListener('touchend',(e)=>{resetMouseDownInfo()});if(Object.keys(readingHistories).indexOf(index)%2===0){narouItem.querySelector('.narou-item').classList.add('narou-item-even')}else{narouItem.querySelector('.narou-item').classList.add('narou-item-odd')}
narouHistoryList.appendChild(narouItem)}}catch(error){ons.notification.alert(error)}finally{if(db)closeDB(db);}}
async function 未読にする(event){const dialog=event.target.closest('ons-dialog');let db=null;try{db=await openDB();await deleteStoreValue(db,READING_HISTORY_STORE_NAME,dialog.dataset.url)}finally{if(db)await closeDB(db);}
dialog.hide();履歴一覧表示()}
async function 先読みデータ消去(event){const dialog=event.target.closest('ons-dialog');let db=null;try{db=await openDB();await deleteStoreValue(db,AHEAD_PAGES_STORE_NAME,dialog.dataset.url)}finally{if(db)await closeDB(db);}
dialog.hide()}
function エピソード削除ダイアログ(event){const onsDialogEpisodeDelete=document.getElementById('ons-dialog-episode-delete');const pDelTitle=document.getElementById('p-del-title');pDelTitle.textContent=`${onsDialogEpisodeDelete.dataset.title}`;const spanSakidelCount=document.getElementById('span-sakidel-count');spanSakidelCount.textContent=`(${onsDialogEpisodeDelete.dataset.aheadPageCount})`}
async function 履歴長押し(event){const target=event.target.closest('ons-list-item');const url=target.getAttribute('url');const title=target.getAttribute('title');const dialog=document.createElement('ons-dialog');let aheadPages={};let db=null;try{db=await openDB();aheadPages=await getStoreValue(db,AHEAD_PAGES_STORE_NAME,url)||{url:url,pages:[]}}finally{if(db)await closeDB(db);}
const aheadPageData=aheadPages.pages;const aheadPageCount=aheadPageData?Object.keys(aheadPageData).length:0;const onsDialogEpisodeDelete=document.getElementById('ons-dialog-history-delete');onsDialogEpisodeDelete.dataset.url=url;onsDialogEpisodeDelete.dataset.title=title;onsDialogEpisodeDelete.dataset.aheadPageCount=aheadPageCount;onsDialogEpisodeDelete.show()}
function 履歴削除ダイアログ表示(event){const onsDialogHistoryDelete=document.getElementById('ons-dialog-history-delete');const pHistoryDelTitle=document.getElementById('p-history-del-title');pHistoryDelTitle.textContent=`${onsDialogHistoryDelete.dataset.title}`;const spanHisdelCount=document.getElementById('span-hisdel-count');spanHisdelCount.textContent=`(${onsDialogHistoryDelete.dataset.aheadPageCount})`}
async function 履歴アイコンの更新(event){const narouList=document.getElementById('ons-list-narou-history');const narouItems=narouList.querySelectorAll('.narou-item');let readingHistories={};let db=null;try{db=await openDB(db);readingHistories=await getAllStoreValue(db,READING_HISTORY_STORE_NAME)}finally{if(db)await closeDB(db);}
narouItems.forEach(narouItem=>{const url=narouItem.getAttribute('url');const historyItem=readingHistories.find(v=>v.url===url);let readingStatus='Unread';let totalEpisodeCount=1;let currentEpisode=1;if(historyItem){readingStatus=historyItem.status!==undefined?historyItem.status:'Unread';totalEpisodeCount=historyItem.totalEpisodeCount!==undefined?historyItem.totalEpisodeCount:1;currentEpisode=historyItem.currentEpisode!==undefined?historyItem.currentEpisode:1}
if(readingStatus=='Done'&&totalEpisodeCount!==currentEpisode){readingStatus='Reading'}
const icon=narouItem.querySelector('.narou-item-icon');if(readingStatus==='Reading'){icon.setAttribute('icon','fa-book-open');icon.style.color="#eb9d9d"}else if(readingStatus==='Done'){icon.setAttribute('icon','fa-check');icon.style.color="green"}else{icon.setAttribute('icon','fa-book');icon.style.color="rgb(175, 175, 175)"}})}
window.addEventListener('load',DB初期化);window.addEventListener('popstate',バックボタン処理);document.addEventListener('swipeleft',左にスワイプ);document.addEventListener('swiperight',右にスワイプ);let onsnavigator1_element=document.querySelector('#ons-navigator1');if(onsnavigator1_element){onsnavigator1_element.addEventListener('prepush',ヒストリー追加)}
document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page1'){let onsbuttonmidoku_element=document.querySelector('#ons-button-midoku');if(onsbuttonmidoku_element){onsbuttonmidoku_element.addEventListener('click',未読にする);page.addEventListener('destroy',function(event){onsbuttonmidoku_element.removeEventListener('click',未読にする)},{'once':!0})}
let onsbuttonsakiDel_element=document.querySelector('#ons-button-sakiDel');if(onsbuttonsakiDel_element){onsbuttonsakiDel_element.addEventListener('click',先読みデータ消去);page.addEventListener('destroy',function(event){onsbuttonsakiDel_element.removeEventListener('click',先読みデータ消去)},{'once':!0})}
let onstoolbarbutton4_element=document.querySelector('#ons-toolbar-button4');if(onstoolbarbutton4_element){onstoolbarbutton4_element.addEventListener('click',履歴ページに移動);page.addEventListener('destroy',function(event){onstoolbarbutton4_element.removeEventListener('click',履歴ページに移動)},{'once':!0})}
作品一覧表示(event);page.addEventListener('show',アイコンの更新);page.addEventListener('destroy',function(event){page.removeEventListener('show',アイコンの更新)},{'once':!0});let onssegment1_element=document.querySelector('#ons-segment1');if(onssegment1_element){onssegment1_element.addEventListener('postchange',作品一覧表示);page.addEventListener('destroy',function(event){onssegment1_element.removeEventListener('postchange',作品一覧表示)},{'once':!0})}
let onsdialogepisodedelete_element=document.querySelector('#ons-dialog-episode-delete');if(onsdialogepisodedelete_element){onsdialogepisodedelete_element.addEventListener('preshow',エピソード削除ダイアログ);page.addEventListener('destroy',function(event){onsdialogepisodedelete_element.removeEventListener('preshow',エピソード削除ダイアログ)},{'once':!0})}}});document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page6'){let onsbutton4_element=document.querySelector('#ons-button4');if(onsbutton4_element){onsbutton4_element.addEventListener('click',未読にする);page.addEventListener('destroy',function(event){onsbutton4_element.removeEventListener('click',未読にする)},{'once':!0})}
let onsbutton5_element=document.querySelector('#ons-button5');if(onsbutton5_element){onsbutton5_element.addEventListener('click',先読みデータ消去);page.addEventListener('destroy',function(event){onsbutton5_element.removeEventListener('click',先読みデータ消去)},{'once':!0})}
履歴一覧表示(event);page.addEventListener('show',履歴アイコンの更新);page.addEventListener('destroy',function(event){page.removeEventListener('show',履歴アイコンの更新)},{'once':!0});let onsdialoghistorydelete_element=document.querySelector('#ons-dialog-history-delete');if(onsdialoghistorydelete_element){onsdialoghistorydelete_element.addEventListener('preshow',履歴削除ダイアログ表示);page.addEventListener('destroy',function(event){onsdialoghistorydelete_element.removeEventListener('preshow',履歴削除ダイアログ表示)},{'once':!0})}}});document.addEventListener('init',(event)=>{let page=event.target;if(page.id==='ons-page2'){let onsselect1_element=document.querySelector('#ons-select1');if(onsselect1_element){onsselect1_element.addEventListener('change',ページ選択);page.addEventListener('destroy',function(event){onsselect1_element.removeEventListener('change',ページ選択)},{'once':!0})}
let prevpagebutton_element=document.querySelector('#prev-page-button');if(prevpagebutton_element){prevpagebutton_element.addEventListener('click',前のページへ移動);page.addEventListener('destroy',function(event){prevpagebutton_element.removeEventListener('click',前のページへ移動)},{'once':!0})}
let nextpagebutton_element=document.querySelector('#next-page-button');if(nextpagebutton_element){nextpagebutton_element.addEventListener('click',次のページに移動);page.addEventListener('destroy',function(event){nextpagebutton_element.removeEventListener('click',次のページに移動)},{'once':!0})}
let playbutton_element=document.querySelector('#play-button');if(playbutton_element){playbutton_element.addEventListener('click',読み上げ開始);page.addEventListener('destroy',function(event){playbutton_element.removeEventListener('click',読み上げ開始)},{'once':!0})}
let pausebutton_element=document.querySelector('#pause-button');if(pausebutton_element){pausebutton_element.addEventListener('click',読み上げ停止);page.addEventListener('destroy',function(event){pausebutton_element.removeEventListener('click',読み上げ停止)},{'once':!0})}
let onstoolbarbutton2_element=document.querySelector('#ons-toolbar-button2');if(onstoolbarbutton2_element){onstoolbarbutton2_element.addEventListener('click',読み上げ設定);page.addEventListener('destroy',function(event){onstoolbarbutton2_element.removeEventListener('click',読み上げ設定)},{'once':!0})}
読み上げページ初期化(event);page.addEventListener('show',なろう詳細ページのShow);page.addEventListener('destroy',function(event){page.removeEventListener('show',なろう詳細ページのShow)},{'once':!0});page.addEventListener('hide',読み上げ停止);page.addEventListener('destroy',function(event){page.removeEventListener('hide',読み上げ停止)},{'once':!0});page.addEventListener('hide',ヒストリー消去);page.addEventListener('destroy',function(event){page.removeEventListener('hide',ヒストリー消去)},{'once':!0});page.addEventListener('hide',評価ダイアログを閉じる);page.addEventListener('destroy',function(event){page.removeEventListener('hide',評価ダイアログを閉じる)},{'once':!0})}})